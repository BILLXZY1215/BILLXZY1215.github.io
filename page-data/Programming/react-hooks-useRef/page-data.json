{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/Programming/react-hooks-useRef/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Zeyu's Blog"}},"markdownRemark":{"id":"94e3ea4e-38f6-5ee7-a56d-f5404c62fe0c","excerpt":"什么是 useRef()  是一个 react 自建的 hook，可以传一个初始参数，并返回一个 reference (是一个 object 且自带属性 )。 Mutable Value useRef() 与 useState() 的区别 我们来看一个简单的例子：点击按钮组件，分别用 useRef…","html":"<h2>什么是 useRef()</h2>\n<p><code class=\"language-text\">useRef(initialValue)</code> 是一个 react 自建的 hook，可以传一个初始参数，并返回一个 reference (是一个 object 且自带属性 <code class=\"language-text\">current</code>)。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { useRef } from 'react';\n\nfunction MyComponent() {\n  const reference = useRef(initialValue);\n\n  const someHandler = () => {\n    // Access reference value: (GET)\n    const value = reference.current;\n\n    // Update reference value: (SET)\n    reference.current = newValue;\n  };\n\n  // ...\n}</code></pre></div>\n<h2>Mutable Value</h2>\n<h3>useRef() 与 useState() 的区别</h3>\n<p>我们来看一个简单的例子：点击按钮组件，分别用 useRef() 和 useState() 来实现：</p>\n<ul>\n<li>useRef() 实现</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { useRef } from 'react';\n\nfunction LogButtonClicks() {\n  const countRef = useRef(0);\n\n  const handle = () => {\n    countRef.current++;\n    console.log(`Clicked ${countRef.current} times`);\n  };\n\n  console.log('I rendered!');\n\n  return &lt;button onClick={handle}>Click me&lt;/button>;\n}</code></pre></div>\n<p>console 中只会出现一次 <code class=\"language-text\">I rendered!</code></p>\n<ul>\n<li>useState() 实现</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { useState } from 'react';\n\nfunction LogButtonClicks() {\n  const [count, setCount] = useState(0);\n\n  const handle = () => {\n    const updatedCount = count + 1;\n    console.log(`Clicked ${updatedCount} times`);\n    setCount(updatedCount);\n  };\n\n  console.log('I rendered!');\n\n  return &lt;button onClick={handle}>Click me&lt;/button>;\n}</code></pre></div>\n<p>每 click 一次，console 都会出现一次 <code class=\"language-text\">I rendered!</code></p>\n<p>总结：</p>\n<ol>\n<li>更新一个 reference 不会触发重新渲染，而更新 state 会使组件重新渲染。</li>\n<li>Reference 更新是同步的（更新后立即可用），而 state 更新是异步的（state 必须重新渲染后才能更新）。</li>\n</ol>\n<p>Tips: state 和 reference 合用的例子：（实现一个计时器）</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { useRef, useState, useEffect } from 'react';\n\nfunction Stopwatch() {\n  const timerIdRef = useRef(0);\n  const [count, setCount] = useState(0);\n\n  const startHandler = () => {\n    if (timerIdRef.current) { return; }\n    timerIdRef.current = setInterval(() => setCount(c => c+1), 1000);\n  };\n\n  const stopHandler = () => {\n    clearInterval(timerIdRef.current);\n    timerIdRef.current = 0;\n  };\n\n  useEffect(() => {\n    return () => clearInterval(timerIdRef.current);\n  }, []);\n\n  return (\n    &lt;div>\n      &lt;div>Timer: {count}s&lt;/div>\n      &lt;div>\n        &lt;button onClick={startHandler}>Start&lt;/button>\n        &lt;button onClick={stopHandler}>Stop&lt;/button>\n      &lt;/div>\n    &lt;/div>\n  );\n}</code></pre></div>\n<h2>Accessing DOM elements</h2>\n<p>用 useRef 锁定 DOM 元素三部曲：</p>\n<ol>\n<li>定义：<code class=\"language-text\">const elementRef = useRef()</code></li>\n<li>组件设置 ref ：<code class=\"language-text\">&lt;div ref={elementRef}>&lt;/div></code></li>\n<li>Mounting 过后，<code class=\"language-text\">elementRef.current</code> 就指向了 DOM 元素。</li>\n</ol>\n<p>举例：（focus 一个 input）</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { useRef, useEffect } from 'react';\n\nfunction InputFocus() {\n  const inputRef = useRef();\n\n  useEffect(() => {\n    // Logs `HTMLInputElement`\n    console.log(inputRef.current);\n\n    inputRef.current.focus();\n  }, []); // 只会在第一次渲染过后触发一次，源于 useEffect dependency 为 [] 的机制。\n\n  // Logs `undefined` during initial rendering\n  console.log(inputRef.current);\n\n  return &lt;input ref={inputRef} type=\"text\" />;\n}</code></pre></div>\n<h2>Reference</h2>\n<ol>\n<li><a href=\"https://dmitripavlutin.com/react-useref-guide/\">react-useref-guide</a></li>\n</ol>","frontmatter":{"title":"React Hooks: useRef","date":"July 09, 2021","description":" useRef 的基本用法，以及与 useState 的区别"}},"previous":{"fields":{"slug":"/Programming/const-let-var/"},"frontmatter":{"title":"Const vs Let vs Var"}},"next":{"fields":{"slug":"/Programming/===vs==/"},"frontmatter":{"title":" === vs == "}}},"pageContext":{"id":"94e3ea4e-38f6-5ee7-a56d-f5404c62fe0c","previousPostId":"de14ad24-0a5d-50e2-857a-a215b51b0746","nextPostId":"fbd3453e-3e14-598f-8abb-2cca23562f86"}},
    "staticQueryHashes": ["2841359383","3257411868"]}