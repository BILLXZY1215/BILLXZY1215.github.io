{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/Programming/promise.all/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Zeyu's Blog"}},"markdownRemark":{"id":"e7cd4348-4c88-5ce2-b131-ea4a15cbde7b","excerpt":"概述  中的 Promise 序列会全部执行通过才认为是成功，否则认为是失败  中的 Promise 序列只关心第一个执行完毕的：如果第一个执行完毕的是通过，则认为成功，如果第一个执行完毕的 Promise 是拒绝，则认为失败  中的 Promise…","html":"<h2>概述</h2>\n<ul>\n<li><code class=\"language-text\">Promise.all()</code> 中的 Promise 序列会全部执行通过才认为是成功，否则认为是失败</li>\n<li><code class=\"language-text\">Promise.race()</code> 中的 Promise 序列只关心第一个执行完毕的：如果第一个执行完毕的是通过，则认为成功，如果第一个执行完毕的 Promise 是拒绝，则认为失败</li>\n<li><code class=\"language-text\">Promise.any()</code> 中的 Promise 序列只要有一个执行通过，则认为成功，如果全部拒绝，则认为失败 (有点像 OR)</li>\n</ul>\n<h2>思考 🤔</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">假设有三个async任务放进Promise，每个任务成功的概率为50%，那么对于 Promise.all, Promise.race 和 Promise.any 来说，成功的概率分别是多少？</code></pre></div>\n<ul>\n<li><code class=\"language-text\">Promise.all()</code> 50% * 50% *50% = 12.5%</li>\n<li><code class=\"language-text\">Promise.race()</code> 50%</li>\n<li><code class=\"language-text\">Promise.any()</code> 1 - 50% * 50% * 50% = 87.5%</li>\n</ul>\n<h2>使用场景</h2>\n<ul>\n<li><code class=\"language-text\">Promise.all()</code>\n在图片批量上传的时候很有用，可以知道什么时候这批图片全部上传完毕，保证了并行，同时知道最终的上传结果。\n又例如，页面进行请求的时候，如果请求时间太短，loading 图标就会一闪而过，体验并不好。<code class=\"language-text\">Promise.all()</code>可以保证最低 loading 时间。</li>\n<li><code class=\"language-text\">Promise.race()</code>\n上面的 loading 策略仔细一想，有些怪怪的，请求本来很快，还非要显示一个 loading，这不是舍本逐末了吗？\n所以需求应该是这样，如果请求可以在 200ms 内完成，则不显示 loading，如果要超过 200ms，则至少显示 200ms 的 loading。\n这个需求可以用<code class=\"language-text\">Promise.race()</code>来实现。</li>\n<li><code class=\"language-text\">Promise.any()</code>\n适合用在通过不同路径请求同一个资源的需求上。只要有一个路径请求成功就算成功。\n它是一个新出的规范，兼容性没有上面两个强。</li>\n</ul>\n<hr>\n<h2>Reference</h2>\n<ol>\n<li><a href=\"https://www.zhangxinxu.com/wordpress/2021/05/promise-all-race-any/\">张鑫旭的个人博客</a></li>\n</ol>","frontmatter":{"title":"Promise.all","date":"June 24, 2021","description":"Promise.all race 和 any 的用法及区别"}},"previous":{"fields":{"slug":"/Programming/git-use/"},"frontmatter":{"title":"git-use"}},"next":{"fields":{"slug":"/Research/music-vision/"},"frontmatter":{"title":"Music Vision: an interactive bio-inspired sonification tool to convert images into music "}}},"pageContext":{"id":"e7cd4348-4c88-5ce2-b131-ea4a15cbde7b","previousPostId":"f0cbe762-ae82-51d5-a99b-9ea3eb763958","nextPostId":"ccb42027-af17-5ba3-9f0d-0333cf1d3cf6"}},
    "staticQueryHashes": ["2841359383","3257411868"]}